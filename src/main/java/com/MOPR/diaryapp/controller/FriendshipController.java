package com.MOPR.diaryapp.controller;

import com.MOPR.diaryapp.model.Friendship;
import com.MOPR.diaryapp.model.User;
import com.MOPR.diaryapp.repository.FriendshipRepository;
import com.MOPR.diaryapp.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/friendships")
public class FriendshipController {

    @Autowired
    private FriendshipRepository friendshipRepo;

    @Autowired
    private UserRepository userRepo;

    // G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n th√¥ng qua email
    @PostMapping("/send-request")
    public ResponseEntity<?> sendFriendRequest(@RequestParam Long fromUserId,
                                               @RequestParam String receiverEmail) {
        Optional<User> fromUserOpt = userRepo.findById(fromUserId);
        Optional<User> toUserOpt = userRepo.findByEmail(receiverEmail);

        if (fromUserOpt.isEmpty() || toUserOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Ng∆∞·ªùi g·ª≠i ho·∫∑c ng∆∞·ªùi nh·∫≠n kh√¥ng t·ªìn t·∫°i");
        }

        User from = fromUserOpt.get();
        User to = toUserOpt.get();

        // Ki·ªÉm tra n·∫øu ƒë√£ g·ª≠i y√™u c·∫ßu r·ªìi
        Optional<Friendship> existing = friendshipRepo.findByRequesterAndReceiver(from, to);
        if (existing.isPresent()) {
            return ResponseEntity.badRequest().body("B·∫°n ƒë√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n tr∆∞·ªõc ƒë√≥ r·ªìi");
        }

        // Ki·ªÉm tra n·∫øu ƒë√£ l√† b·∫°n (ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n)
        Optional<Friendship> reverse = friendshipRepo.findByRequesterAndReceiver(to, from);
        if (reverse.isPresent() && reverse.get().isAccepted()) {
            return ResponseEntity.badRequest().body("Hai b·∫°n ƒë√£ l√† ng∆∞·ªùi y√™u c·ªßa nhau r·ªìi ü•∞");
        }

        Friendship friendship = new Friendship(null, from, to, false);
        friendshipRepo.save(friendship);
        return ResponseEntity.ok("ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n ƒë·∫øn " + receiverEmail);
    }

    // Ng∆∞·ªùi nh·∫≠n ch·∫•p nh·∫≠n l·ªùi m·ªùi
    @PostMapping("/accept")
    public ResponseEntity<?> acceptFriendRequest(@RequestParam Long requestId) {
        Optional<Friendship> friendshipOpt = friendshipRepo.findById(requestId);
        if (friendshipOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi");
        }

        Friendship friendship = friendshipOpt.get();
        friendship.setAccepted(true);
        friendshipRepo.save(friendship);
        return ResponseEntity.ok("ƒê√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n");
    }

    // Ng∆∞·ªùi nh·∫≠n t·ª´ ch·ªëi l·ªùi m·ªùi (x√≥a l·ªùi m·ªùi)
    @DeleteMapping("/decline")
    public ResponseEntity<?> declineFriendRequest(@RequestParam Long requestId) {
        Optional<Friendship> friendshipOpt = friendshipRepo.findById(requestId);
        if (friendshipOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi");
        }

        friendshipRepo.deleteById(requestId);
        return ResponseEntity.ok("ƒê√£ t·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n");
    }

    // L·∫•y danh s√°ch l·ªùi m·ªùi nh·∫≠n ƒë∆∞·ª£c (d√†nh cho user m·ªü app l√™n v√† xem)
    @GetMapping("/requests")
    public ResponseEntity<?> getFriendRequests(@RequestParam Long userId) {
        Optional<User> userOpt = userRepo.findById(userId);
        if (userOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
        }

        List<Friendship> requests = friendshipRepo.findByReceiverAndAcceptedFalse(userOpt.get());
        return ResponseEntity.ok(requests);
    }
}